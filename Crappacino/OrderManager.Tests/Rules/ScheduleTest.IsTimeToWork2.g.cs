// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Pex.Framework.Generated;

namespace OrderManager.Rules
{
    public partial class ScheduleTest
    {
[TestMethod]
[PexGeneratedBy(typeof(ScheduleTest))]
public void IsTimeToWork2279()
{
    Schedule schedule;
    bool b;
    schedule =
      ScheduleFactory.Create(default(TimeSpan), 0, default(DateTime), false);
    b = this.IsTimeToWork2(schedule, default(DateTime));
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)schedule);
    Assert.AreEqual<int>(1, schedule.NumberOfDaysDelay);
    Assert.AreEqual<int>(0, schedule.StartTime.Days);
    Assert.AreEqual<int>(0, schedule.StartTime.Hours);
    Assert.AreEqual<int>(0, schedule.StartTime.Milliseconds);
    Assert.AreEqual<int>(0, schedule.StartTime.Minutes);
    Assert.AreEqual<int>(0, schedule.StartTime.Seconds);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Day);
    Assert.AreEqual<DayOfWeek>(DayOfWeek.Monday, schedule.NextSendDate.DayOfWeek);
    Assert.AreEqual<int>(1, schedule.NextSendDate.DayOfYear);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Hour);
    Assert.AreEqual<DateTimeKind>
        (DateTimeKind.Unspecified, schedule.NextSendDate.Kind);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Millisecond);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Minute);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Month);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Second);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Year);
    Assert.AreEqual<bool>(false, schedule.Enabled);
}
[TestMethod]
[PexGeneratedBy(typeof(ScheduleTest))]
public void IsTimeToWork2871()
{
    Schedule schedule;
    bool b;
    schedule =
      ScheduleFactory.Create(default(TimeSpan), 0, default(DateTime), false);
    b = this.IsTimeToWork2
            (schedule, new DateTime(4611686018427387903L & 1776388578020950016L, 
                                    (DateTimeKind)(1776388578020950016uL >> 62)));
    Assert.AreEqual<bool>(true, b);
    Assert.IsNotNull((object)schedule);
    Assert.AreEqual<int>(1, schedule.NumberOfDaysDelay);
    Assert.AreEqual<int>(0, schedule.StartTime.Days);
    Assert.AreEqual<int>(0, schedule.StartTime.Hours);
    Assert.AreEqual<int>(0, schedule.StartTime.Milliseconds);
    Assert.AreEqual<int>(0, schedule.StartTime.Minutes);
    Assert.AreEqual<int>(0, schedule.StartTime.Seconds);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Day);
    Assert.AreEqual<DayOfWeek>(DayOfWeek.Monday, schedule.NextSendDate.DayOfWeek);
    Assert.AreEqual<int>(1, schedule.NextSendDate.DayOfYear);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Hour);
    Assert.AreEqual<DateTimeKind>
        (DateTimeKind.Unspecified, schedule.NextSendDate.Kind);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Millisecond);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Minute);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Month);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Second);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Year);
    Assert.AreEqual<bool>(false, schedule.Enabled);
}
[TestMethod]
[PexGeneratedBy(typeof(ScheduleTest))]
public void IsTimeToWork2271()
{
    Schedule schedule;
    bool b;
    TimeSpan s0 = new TimeSpan(4611686034553610826L);
    schedule = ScheduleFactory.Create(s0, 0, default(DateTime), false);
    b = this.IsTimeToWork2
            (schedule, new DateTime(4611686018427387903L & 1776388578020950016L, 
                                    (DateTimeKind)(1776388578020950016uL >> 62)));
    Assert.AreEqual<bool>(false, b);
    Assert.IsNotNull((object)schedule);
    Assert.AreEqual<int>(1, schedule.NumberOfDaysDelay);
    Assert.AreEqual<int>(5337599, schedule.StartTime.Days);
    Assert.AreEqual<int>(13, schedule.StartTime.Hours);
    Assert.AreEqual<int>(361, schedule.StartTime.Milliseconds);
    Assert.AreEqual<int>(50, schedule.StartTime.Minutes);
    Assert.AreEqual<int>(55, schedule.StartTime.Seconds);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Day);
    Assert.AreEqual<DayOfWeek>(DayOfWeek.Monday, schedule.NextSendDate.DayOfWeek);
    Assert.AreEqual<int>(1, schedule.NextSendDate.DayOfYear);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Hour);
    Assert.AreEqual<DateTimeKind>
        (DateTimeKind.Unspecified, schedule.NextSendDate.Kind);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Millisecond);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Minute);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Month);
    Assert.AreEqual<int>(0, schedule.NextSendDate.Second);
    Assert.AreEqual<int>(1, schedule.NextSendDate.Year);
    Assert.AreEqual<bool>(false, schedule.Enabled);
}
    }
}
